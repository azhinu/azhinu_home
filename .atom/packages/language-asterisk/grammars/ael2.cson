fileTypes: [
  "ael"
]
name: "AEL2"
patterns: [
  {
    include: "#main"
  }
]
repository:
  "any-string":
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#preprocessor"
      }
      {
        include: "#constants"
      }
      {
        include: "#quoted-string"
      }
      {
        include: "#expressions"
      }
      {
        include: "#variables"
      }
      {
        include: "#parens"
      }
    ]
  arrow:
    match: "=>"
    name: "comment.line.double-slash.ael"
  assignment:
    begin: "(\\s?)(=)(?!>)( ?)"
    beginCaptures:
      "1":
        name: "invalid.illegal.ael"
      "2":
        name: "keyword.operator.ael"
      "3":
        name: "invalid.illegal.ael"
    end: "(?=;|\\))"
    name: "meta.assignment.ael"
    patterns: [
      {
        include: "#number"
      }
      {
        include: "#operators"
      }
      {
        include: "#any-string"
      }
    ]
  braces:
    patterns: [
      {
        begin: "\\{"
        beginCaptures:
          "0":
            name: "meta.brace.curly.ael"
        end: "\\}"
        endCaptures:
          "0":
            name: "meta.brace.curly.ael"
        name: "meta.group.braces.curly.ael"
        patterns: [
          {
            include: "$self"
          }
        ]
      }
    ]
  comment:
    captures:
      "1":
        name: "punctuation.definition.comment.ael"
    comment: "a comment line"
    match: "\\s*(//).*"
    name: "comment.line.double-slash.ael"
  constants:
    patterns: [
      {
        comment: "Days of week"
        match: "\\b(mon|tue|wed|thu|fri|sat|sun)\\b"
        name: "support.constant.ael"
      }
      {
        comment: "Months"
        match: "\\b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\\b"
        name: "support.constant.ael"
      }
      {
        comment: "times"
        match: "\\d{1,2}:\\d\\d"
        name: "support.constant.ael"
      }
    ]
  context:
    captures:
      "1":
        name: "keyword.other.context.ael"
      "2":
        name: "support.constant.ael"
    comment: "context section"
    match: "(?<=^|\\s)(context)(\\s+default)?(?=\\s|$)"
    name: "meta.context.ael"
  expressions:
    begin: "\\$\\["
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.shell"
    end: "\\]"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.shell"
    name: "meta.expression.ael"
    patterns: [
      {
        include: "#number"
      }
      {
        include: "#operators"
      }
      {
        include: "#any-string"
      }
    ]
  extension:
    patterns: [
      {
        begin: "(?<=^|\\s|/)_(\\.?)(?!.*=[^>])"
        beginCaptures:
          "0":
            name: "comment.line.double-slash.ael"
          "1":
            name: "invalid.deprecated.ael"
        comment: "pattern extension"
        end: "(?:(/(?!/))|(=>))"
        endCaptures:
          "1":
            name: "comment.line.double-slash.ael"
          "2":
            name: "comment.line.double-slash.ael"
        name: "meta.regexp.ael"
        patterns: [
          {
            include: "#pattern-string-shallow"
          }
        ]
      }
      {
        captures:
          "1":
            name: "constant.character.escape.ael"
          "2":
            name: "variable.parameter.ael"
          "3":
            name: "comment.line.double-slash.ael"
          "4":
            name: "comment.line.double-slash.ael"
        comment: "special or regular extension"
        match: '''
          (?x)
            (?:(s|a|o|t|T|i|e|h)|([\\w\\-\\*#\\.\\!]+))
            (?:\\s*(=>)|(/(?!/))(?=.*?=>))
        '''
        name: "meta.extension.ael"
      }
    ]
  globals:
    comment: "globals section"
    match: "(?<=^|\\s)(globals)(?=\\s|$)"
    name: "meta.globals.ael keyword.other.globals.ael"
  keywords:
    patterns: [
      {
        match: "(?<![\\w\\-])(includes|e?switches)(?![\\w\\-])"
        name: "keyword.other.ael"
      }
      {
        match: "(?<![\\w\\-])(abstract|regexten|local(?=\\s.*?=))(?![\\w\\-])"
        name: "storage.modifier.ael"
      }
      {
        match: "(?<![\\w\\-])(default(?=:)|else|goto|jump|switch|return|break|continue)(?![\\w\\-])"
        name: "keyword.control.ael"
      }
      {
        begin: "(?<![\\w\\-])(pattern)(?![\\w\\-])"
        beginCaptures:
          "1":
            name: "keyword.control.ael"
        end: ":"
        patterns: [
          {
            include: "#pattern-string-shallow"
          }
        ]
      }
      {
        begin: "(?<![\\w\\-])(case)(?![\\w\\-])"
        beginCaptures:
          "1":
            name: "keyword.control.ael"
        end: ":"
        patterns: [
          {
            captures:
              "1":
                name: "constant.character.escape.ael"
              "2":
                name: "variable.parameter.ael"
            comment: "special or regular extension"
            match: "(?:(s|a|o|t|T|i|e|h)|([\\w\\-\\*#]+))"
            name: "meta.extension.ael"
          }
        ]
      }
      {
        begin: "(?<![\\w\\-])(catch)(?![\\w\\-])"
        beginCaptures:
          "1":
            name: "keyword.control.ael"
        end: "\\{"
        patterns: [
          {
            captures:
              "1":
                name: "constant.character.escape.ael"
              "2":
                name: "variable.parameter.ael"
            comment: "special or regular extension"
            match: "(?:(s|a|o|t|T|i|e|h)|([\\w\\-\\*#]+))"
            name: "meta.extension.ael"
          }
        ]
      }
      {
        begin: "(?<![\\w\\-])(hint|ifTime)\\s*(\\()"
        beginCaptures:
          "1":
            name: "keyword.control.ael"
        end: "(\\))"
        patterns: [
          {
            include: "#any-string"
          }
        ]
      }
      {
        begin: "(?<![\\w\\-])(random)\\s*(\\()"
        beginCaptures:
          "1":
            name: "keyword.control.ael"
        end: "(\\))"
        patterns: [
          {
            include: "#number"
          }
        ]
      }
      {
        begin: "(?<![\\w\\-])(if|for|while)\\s*(\\()"
        beginCaptures:
          "1":
            name: "keyword.control.ael"
        end: "(\\))"
        patterns: [
          {
            include: "#number"
          }
          {
            include: "#operators"
          }
          {
            include: "#any-string"
          }
        ]
      }
    ]
  label:
    captures:
      "1":
        name: "entity.name.tag.ael"
    match: "([\\w\\-]+)(?<!default)\\:"
  macro:
    begin: "(?<=^|\\s)(macro)\\s+([\\w\\-]+)\\s*"
    beginCaptures:
      "1":
        name: "keyword.other.macro.ael"
      "2":
        name: "entity.name.function.macro.ael"
    comment: "macro declaration"
    end: "(?<=\\))"
    name: "meta.function.ael"
    patterns: [
      {
        begin: "\\("
        beginCaptures:
          "0":
            name: "punctuation.definition.parameters.begin.ael"
        end: "\\)"
        endCaptures:
          "0":
            name: "punctuation.definition.parameters.end.ael"
        patterns: [
          {
            match: "[_$a-zA-Z\\-][$\\w]*"
            name: "variable.parameter.function.ael"
          }
          {
            match: ","
            name: "punctuation.separator.parameter.function.ael"
          }
          {
            include: "#preprocessor"
          }
          {
            include: "#comment"
          }
        ]
      }
      {
        include: "#preprocessor"
      }
      {
        include: "#comment"
      }
    ]
  "macro-call":
    captures:
      "1":
        name: "punctuation.definition.macro.ael"
      "2":
        name: "entity.name.function.ael"
    match: "(&)([\\w\\-]*)(?=\\()"
  main:
    patterns: [
      {
        include: "#preprocessor"
      }
      {
        include: "#comment"
      }
      {
        include: "#globals"
      }
      {
        include: "#arrow"
      }
      {
        include: "#keywords"
      }
      {
        include: "#label"
      }
      {
        include: "#context"
      }
      {
        include: "#macro"
      }
      {
        include: "#macro-call"
      }
      {
        include: "#braces"
      }
      {
        include: "#any-string"
      }
      {
        include: "#parens"
      }
      {
        include: "#assignment"
      }
      {
        include: "#extension"
      }
      {
        include: "#punctuation"
      }
    ]
  number:
    match: "\\d+(\\.\\d+)?"
    name: "constant.numeric.ael"
  operators:
    match: "(=~|=(?!=)|!|!=|<=|>=|-|\\*|\\+|/(?!/)|%|<|>|:|\\?|\\|(?!\\|)|&(?!&))"
    name: "keyword.operator.ael"
  parens:
    patterns: [
      {
        begin: "\\("
        beginCaptures:
          "0":
            name: "meta.brace.round.ael"
        end: "\\)"
        endCaptures:
          "0":
            name: "meta.brace.round.ael"
        name: "meta.group.braces.round"
        patterns: [
          {
            include: "#set-assignment"
          }
          {
            include: "#any-string"
          }
          {
            include: "#punctuation"
          }
        ]
      }
    ]
  "pattern-string-deep":
    patterns: [
      {
        include: "#preprocessor"
      }
      {
        include: "#comment"
      }
      {
        begin: "\\["
        captures:
          "0":
            name: "constant.character.escape.ael"
        end: "\\]"
        patterns: [
          {
            match: ".-."
            name: "constant.character.escape.ael"
          }
          {
            include: "#pattern-string-deep"
          }
        ]
      }
      {
        match: "[XZN]+"
        name: "constant.character.escape.ael"
      }
      {
        match: "[\\.!]"
        name: "keyword.control.ael"
      }
      {
        match: "[0-9a-zA-MO-WY\\*#_\\+]"
        name: "variable.parameter.ael"
      }
    ]
  "pattern-string-shallow":
    patterns: [
      {
        include: "#preprocessor"
      }
      {
        include: "#comment"
      }
      {
        match: "\\-"
        name: "comment.line.double-slash.ael"
      }
      {
        include: "#pattern-string-deep"
      }
    ]
  preprocessor:
    captures:
      "1":
        name: "punctuation.definition.preprocessor.ael"
      "2":
        name: "keyword.preprocessor.ael"
      "3":
        name: "string.quoted.single.ael"
      "4":
        name: "punctuation.definition.string.begin.ael"
      "5":
        name: "punctuation.definition.string.end.ael"
      "6":
        name: "string.quoted.double.ael"
      "7":
        name: "punctuation.definition.string.begin.ael"
      "8":
        name: "punctuation.definition.string.end.ael"
      "9":
        name: "string.unquoted.ael"
    comment: false
    match: '''
      (?x)
        (\\#)(include|exec)
        \\s+
        (?: ((<).*?(>)) | ((\\").*?(\\")) | (.*$\\n?) )
    '''
    name: "meta.preprocessor.include.ael"
  punctuation:
    patterns: [
      {
        match: "\\;"
        name: "punctuation.terminator.statement.ael"
      }
      {
        match: ","
        name: "meta.delimiter.comma.ael"
      }
    ]
  "quoted-string":
    patterns: [
      {
        begin: "(\\\")"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.ael"
        end: "(\\\")"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.ael"
        name: "string.quoted.double.ael"
        patterns: [
          {
            include: "#expressions"
          }
          {
            include: "#variables"
          }
        ]
      }
    ]
  "set-assignment":
    begin: "(\\s?)(=)(?!>)( ?)"
    beginCaptures:
      "1":
        name: "invalid.illegal.ael"
      "2":
        name: "keyword.operator.ael"
      "3":
        name: "invalid.illegal.ael"
    end: "(?=;|\\))"
    name: "meta.assignment.ael"
    patterns: [
      {
        include: "#any-string"
      }
      {
        include: "#punctuation"
      }
    ]
  variables:
    begin: "(\\$\\{)(_{0,2})([\\w\\-]*)(?=\\(|\\}|\\$|:)"
    beginCaptures:
      "1":
        name: "punctuation.definition.variable.ael"
      "2":
        name: "invalid.illegal.ael"
      "3":
        name: "variable.other.bracket.ael"
    end: "\\}"
    endCaptures:
      "0":
        name: "punctuation.definition.variable.ael"
    name: "meta.variable.ael"
    patterns: [
      {
        captures:
          "1":
            name: "keyword.operator.ael"
          "2":
            name: "constant.numeric.ael"
        match: "(:)(-?\\d+)?"
        name: "meta.ael"
      }
      {
        include: "#parens"
      }
      {
        include: "#quoted-string"
      }
      {
        include: "#variables"
      }
    ]
scopeName: "source.ael"
